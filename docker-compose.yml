volumes:
  note-data:
  patient-data:

services:
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:25.0.1
    command:
      - start-dev
      - --import-realm
    ports:
      - 8080:8080
    networks:
      - app
    volumes:
      - ./keycloak/:/opt/keycloak/data/import/
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HTTP_PORT: 8080
      KC_HOSTNAME_URL: http://localhost:8080
      KC_HOSTNAME_ADMIN_URL: http://localhost:8080
      KC_HOSTNAME_STRICT_BACKCHANNEL: true
      KC_HTTP_RELATIVE_PATH: /
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: [ 'CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/auth/health/live' ]
      interval: 5s
      timeout: 5s
      retries: 20

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - '27017:27017'
    networks:
      - app
    volumes:
      - note-data:/data/db
    healthcheck:
      test: "mongosh --eval 'db.runCommand(\"ping\").ok' localhost:27017 --quiet || exit 1"
      interval: 10s
      timeout: 10s
      retries: 5

  mysqldb:
    image: mysql:8.0.32
    restart: always
    container_name: mysqldb
    env_file: ./.env
    environment:
      - MYSQL_DATABASE=medilabo
      - MYSQL_ROOT_PASSWORD=${MYSQL_DATASOURCE_PASSWORD}
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_DATASOURCE_PASSWORD}
    ports:
      - 3307:3306
    volumes:
      - patient-data:/var/lib/mysql
      - ./mysql:/docker-entrypoint-initdb.d
    networks:
      - app

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - app

  app-config:
    build:
      context: ./app-config
      dockerfile: Dockerfile
    container_name: app-config
    ports:
      - "9001:9001"
    networks:
      - app

  gateway:
    build:
      context: ./medilabo-gateway
      dockerfile: Dockerfile
    container_name: gateway
    ports:
      - "9000:9000"
    networks:
      - app
    depends_on:
      eureka-server:
        condition: service_started
      app-config:
        condition: service_started

  patients:
    build:
      context: ./medilabo-patients
      dockerfile: Dockerfile
    container_name: patients
    ports:
      - '8090:8090'
    env_file: ./.env
    environment:
      - SPRING_DATASOURCE_URL=${MYSQL_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${MYSQL_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_DATASOURCE_PASSWORD}
      - eureka.client.service-url.defaultZone=http://localhost:8761/eureka
    depends_on:
      mysqldb:
        condition: service_started
      gateway:
        condition: service_started
    volumes:
      - patient-data:/var/lib/mysql
    networks:
      - app
    restart: on-failure

  notes:
    build:
      context: ./medilabo-notes
      dockerfile: Dockerfile
    container_name: notes
    ports:
      - '8091:8091'
    depends_on:
      mongodb:
        condition: service_healthy
      gateway:
        condition: service_started
    environment:
      - "SPRING_DATA_MONGODB_DATABASE=medilabo"
      - "SPRING_DATA_MONGODB_PORT=27017"
      - "SPRING_DATASOURCE_URL=${MONGO_DATASOURCE_URL}"
      - eureka.client.service-url.defaultZone=http://localhost:8761/eureka
    volumes:
      - note-data:/data/db
    networks:
      - app
    restart: on-failure

  risk-report:
    build:
      context: ./medilabo-risk-report
      dockerfile: Dockerfile
    container_name: risk-report
    ports:
      - '8094:8094'
    environment:
      - eureka.client.service-url.defaultZone=http://localhost:8761/eureka
    depends_on:
      patients:
        condition: service_started
      notes:
        condition: service_started
      gateway:
        condition: service_started
    networks:
      - app
    restart: on-failure

  front:
    build:
      context: ./medilabo-front
      dockerfile: Dockerfile
    container_name: front
    environment:
      - eureka.client.service-url.defaultZone=http://localhost:8761/eureka
    ports:
      - '8082:8082'
    depends_on:
      - gateway
    networks:
      - app
    restart: on-failure

networks:
  app:
